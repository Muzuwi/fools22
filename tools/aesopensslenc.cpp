#include <cstdint>
#include <openssl/aes.h>
#include <fmt/format.h>

int main() {
	{
	uint8_t plain[] = {"bruhbruhbruhbruh"};
	const uint8_t pkey[] {0xD0,0x3E,0xC9,0x4D,0x4C,0x00,0x56,0x8B,0x75,0x9C,0x79,0xB1,0x68,0x5C,0xFA,0xFD};

	AES_KEY key;
	AES_set_encrypt_key(pkey, 128, &key);

	uint8_t iv[16] {0xD0,0x3E,0xC9,0x4D,0x4C,0x00,0x56,0x8B,0x75,0x9C,0x79,0xB1,0x68,0x5C,0xFA,0xFD};
	uint8_t out[16] {};
	AES_cbc_encrypt(plain, out, 16, &key, iv, 1);
	
				
			for(unsigned i = 0; i <  16; ++i) {
				if((i % 16) == 0) {
					fmt::print("\n");
				}
				fmt::print("0x{:02x},", out[i]);
			}
			fmt::print("\n");		
	}
	
// 	for(unsigned k = 0; k < 256; ++k) {
// 		for(unsigned v = 0; v < 256; ++v) {
			constexpr const unsigned blocks = 1;
			const uint8_t cipher[] = {
				0x21,0x32,0x27,0xA7,0xE8,0x5C,0x4B,0x07,0xCF,0xD8,0x2E,0x6B,0xBD,0x30,0x32,0xCA,
			};
			static_assert(sizeof(cipher)/16 == blocks, "Invalid cipherblocks size");
			
			const uint8_t pkey[16] {
				0xD0,0x3E,0xC9,0x4D,0x4C,0x00,0x56,0x8B,0x75,0x9C,0x79,0xB1,0x68,0x5C,0xFA,0xFD
			};

			AES_KEY key;
			AES_set_decrypt_key(pkey, 128, &key);
			
			uint8_t iv[16] {
				0xD0,0x3E,0xC9,0x4D,0x4C,0x00,0x56,0x8B,0x75,0x9C,0x79,0xB1,0x68,0x5C,0xFA,0xFD
			};
			uint8_t out[5 * 16] {0};
			AES_cbc_encrypt(cipher, out, blocks * 16, &key, iv, 0);
			
			for(unsigned i = 0; i <  blocks * 16; ++i) {
				if((i % 16) == 0) {
					fmt::print("\n");
				}
				//fmt::print("0x{:02x},", out[i]);
				fmt::print("{},", (char)out[i]);
			}
			fmt::print("\n");		
// 		}
// 	}

	return 0;
}
